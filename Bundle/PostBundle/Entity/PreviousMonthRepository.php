<?php

namespace Adidas\Bundle\PostBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Adidas\Bundle\OmBundle\Branding\SiteContext;

/**
 * PreviousMonthRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PreviousMonthRepository extends EntityRepository
{
    private $club;
    private $siteContext;

    public function setSiteContext(SiteContext $siteContext) {
        $this->siteContext = $siteContext;
        $branding = $siteContext->getCurrentBranding();

        $this->club = $branding['club'];
    }
    public function changeEntityManager($em) {
        $this->_em = $em;
        return $this;
    }
    
    public function InsertMaxMinBy($min, $max, $idChallenge = NULL) {
            $cnx = $this->getEntityManager()
                   ->getConnection();
            if($idChallenge) {
                $idUserMax = $max[0]->getIdMember()->getId();
                $idUserMin = $min[0]->getIdMember()->getId();
                $cnx->prepare("INSERT INTO PreviousMonth (idChallenge, MinPoints, MaxPoints, userMax, userMin) values('".$idChallenge."','".$min['M']."','".$max['M']."','".$idUserMax."','".$idUserMin."')")
                ->execute();
            }
            else {
                $cnx->prepare("INSERT INTO PreviousMonth (MinPoints, MaxPoints, userMax, userMin) values('".$min['M']."','".$max['M']."','".$idUserMax."','".$idUserMin."')")
                ->execute();
            }
    }
    
    public function getUpdateGlobal()
    {
        $date = $this->createQueryBuilder('M')
                    ->select('M.updateAt')
                    ->getQuery()->getResult();
        $date = $date[0]['updateAt'];
        if($date) {
            return $date->format('d-m-Y');
        }
        else {
            return NULL;
        }
    }
    
    public function getBestMonth($id=null)
    {
        $query = $this->createQueryBuilder('m')
                    ->select('m.userMax, m.MaxPoints')
                    ->Where('m.club = :CLUB');
                    if($id)
                        $query->andWhere('m.idChallenge = :ID')
                            ->setParameter('ID', $id);
                    else
                        $query->andWhere('m.idChallenge is NULL');
                    $query->orderBy('m.id', 'DESC')
                    ->setMaxResults(1)
                    ->setParameter('CLUB', $this->club);
                    if($query->getQuery()->getResult())
                        return $query->getQuery()->getResult()[0];
                    else
                        return null;
    }
}