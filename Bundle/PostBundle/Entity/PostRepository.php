<?php

namespace Adidas\Bundle\PostBundle\Entity;

use Adidas\Bundle\OmBundle\Branding\SiteContext;
use Doctrine\ORM\EntityRepository;

/**
 * PostRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PostRepository extends EntityRepository
{
    private $club;
    private $siteContext;
    
    public function changeEntityManager($em) {
        $this->_em = $em;
        return $this;
    }
    
    public function setSiteContext(SiteContext $siteContext) {
        $this->siteContext = $siteContext;
        $branding = $siteContext->getCurrentBranding();

        $this->club = $branding['club'];
    }
    
    public function getPostByClub($source,$max=0) 
    {
        $query = $this->createQueryBuilder('p')
                ->select('c.htag as htag , p.nameMember as name, p.comment, p.source, p.image')
                    ->join('p.challengePostId', 't')
                    ->join('t.idChallenge', 'c')
                    ->where('c.club = :CLUB')
                    ->andWhere("p.nameMember != '' ")
                    ->andWhere('p.active = 1')
                    ->andWhere("p.comment != ''")
                    ->andWhere('p.source = :SOURCE')
                    ->orderBy('p.id','DESC')
                    ->setParameter('CLUB', $this->club)
                    ->setParameter('SOURCE', $source)
                    ->setMaxResults($max);
        return $query->getQuery()->getResult();

    }
    
    public function InsertPostByInstagram($content,$img,$createdTime, $idMaxTag, $idChallenge)
    {
        $comment = addslashes($content['text']);
        $name = $content['from']['username'];
        $source = 'instagram';
        $image = $img['url'];
        $cnx = $this->getEntityManager()->getConnection();
        $stm = $cnx ->prepare("INSERT INTO post (comment, nameMember, source, image, createdAt, idMax) values('".$comment."','".$name."','".$source."','".$image."','".$createdTime."','".$idMaxTag."')")
               ->execute();
        if($stm){
            $idLast = $cnx->lastInsertId();
            $this->InsertChallengePost($idLast, $idChallenge);
            return $idLast;
        }
        else{
            return false;
        }
    }
    
    public function getIdMaxInstagram($id)
    {
        $posts = $this->createQueryBuilder('m')
                ->select('m.id_max')
                ->join('m.challengePostId','p')
                ->join('p.idChallenge', 'c')
                ->where('m.source = ?1 ')
                ->andWhere('c.id = ?2')
                ->orderBy('m.id','DESC')
                ->setMaxResults(1)
                ->setParameter(1, 'instagram')
                ->setParameter(2, $id)
                ->getQuery()->getResult();
        if($posts){
            return $posts[0]['id_max'];
        }
        else{
            return null;
       }
    }
       
    public function getIdMaxTwitter($id)
    {
        $posts = $this->createQueryBuilder('m')
                ->select('m.id_max')
                ->where('m.source = ?1 ')
                ->orderBy('m.id','DESC')
                ->setMaxResults(1)
                ->setParameter(1, 'twitter')
                ->getQuery()->getResult();
        if($posts){
            return $posts[0]['id_max'];
        }
        else{
            return null;
        }      
    }
    
    public function InsertPostByTwitter($name,$text,$createdAt,$maxId,$idChallenge)
    {
        
        $createdAt = date('Y-m-d H:i:s',strtotime($createdAt));
        $comment = addslashes($text);
        $source = 'twitter';
        $cnx = $this->getEntityManager()->getConnection();
        $stm = $cnx->prepare("INSERT INTO post (comment, nameMember, source, createdAt, idMax) values('".$comment."','".$name."','".$source."','".$createdAt."','".$maxId."')")
            ->execute();
        if($stm){  
            $idLast = $cnx->lastInsertId();
            $this->InsertChallengePost($idLast, $idChallenge);
            return $idLast;
        }
        else{
            return null;
        }
    }
    
    public function InsertChallengePost($idPost, $idChallenge)
    {       
            $this->getEntityManager()
            ->getConnection()->prepare("INSERT INTO ChallengePost (idChallenge_id, idPost_id) values('".$idChallenge."','".$idPost."')")
            ->execute();
    }
    
    public function getPostsByChallenge($id)
    {
        $query = $this->createQueryBuilder('p')
                    ->select('c.htag,p')
                    ->join('p.challengePostId', 't')
                    ->join('t.idChallenge', 'c')
                    ->where('c.id = :ID')
                    ->andWhere("p.nameMember != '' ")
                    ->andWhere('p.active = 1')
                    ->andWhere("p.comment != ''")
                    ->orderBy('p.createdAt','DESC')
                    ->setParameter('ID', $id);
                    //->setMaxResults(10);
        return $query->getQuery()->getResult();
        
    }
    
}
